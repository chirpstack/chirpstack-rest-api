{
  "swagger": "2.0",
  "info": {
    "title": "api/device.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "DeviceService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/devices": {
      "get": {
        "summary": "Get the list of devices.",
        "operationId": "DeviceService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListDevicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Max number of devices to return in the result-set.\nIf not set, it will be treated as 0, and the response will only return the total_count.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Offset in the result-set (for pagination).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "search",
            "description": "If set, the given string will be used to search on name (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "applicationId",
            "description": "Application ID (UUID) to filter devices on.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "multicastGroupId",
            "description": "Multicst-group ID (UUID) to filter devices on.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "description": "If set, the given value will be used to sort by (optional).",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NAME",
              "DEV_EUI",
              "LAST_SEEN_AT",
              "DEVICE_PROFILE_NAME"
            ],
            "default": "NAME"
          },
          {
            "name": "orderByDesc",
            "description": "If set, the sorting direction will be decending (default = ascending) (optional).",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "deviceProfileId",
            "description": "Device-profile ID (UUID) to filter devices on.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "post": {
        "summary": "Create the given device.",
        "operationId": "DeviceService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateDeviceRequest"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}": {
      "get": {
        "summary": "Get returns the device for the given DevEUI.",
        "operationId": "DeviceService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "delete": {
        "summary": "Delete the device with the given DevEUI.",
        "operationId": "DeviceService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}/activation": {
      "get": {
        "summary": "GetActivation returns the current activation details of the device (OTAA or\nABP).",
        "operationId": "DeviceService_GetActivation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceActivationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "delete": {
        "summary": "Deactivate de-activates the device.",
        "operationId": "DeviceService_Deactivate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}/dev-nonces": {
      "delete": {
        "summary": "FlushDevNonces flushes the OTAA device nonces.",
        "operationId": "DeviceService_FlushDevNonces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "Device EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}/get-next-f-cnt-down": {
      "post": {
        "summary": "GetNextFCntDown returns the next FCntDown to use for enqueing encrypted\ndownlinks. The difference with the DeviceActivation f_cont_down is that\nthis method takes potential existing queue-items into account.",
        "operationId": "DeviceService_GetNextFCntDown",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceNextFCntDownResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "Device EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}/get-random-dev-addr": {
      "post": {
        "summary": "GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into\naccount.",
        "operationId": "DeviceService_GetRandomDevAddr",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetRandomDevAddrResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}/keys": {
      "get": {
        "summary": "Get the device-keys for the given DevEUI.",
        "operationId": "DeviceService_GetKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceKeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "delete": {
        "summary": "Delete the device-keys for the given DevEUI.",
        "operationId": "DeviceService_DeleteKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}/link-metrics": {
      "get": {
        "summary": "GetLinkMetrics returns the device link metrics.\nThis includes uplinks, downlinks, RSSI, SNR, etc...",
        "operationId": "DeviceService_GetLinkMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceLinkMetricsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "description": "Interval start timestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end",
            "description": "Interval end timestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "aggregation",
            "description": "Aggregation.\n\n - HOUR: Hour.\n - DAY: Day.\n - MONTH: Month.\n - MINUTE: Minute.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "MONTH",
              "MINUTE"
            ],
            "default": "HOUR"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}/metrics": {
      "get": {
        "summary": "GetMetrics returns the device metrics.\nNote that this requires a device-profile with codec and measurements\nconfigured.",
        "operationId": "DeviceService_GetMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceMetricsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "description": "Interval start timestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end",
            "description": "Interval end timestamp.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "aggregation",
            "description": "Aggregation.\n\n - HOUR: Hour.\n - DAY: Day.\n - MONTH: Month.\n - MINUTE: Minute.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "HOUR",
              "DAY",
              "MONTH",
              "MINUTE"
            ],
            "default": "HOUR"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{devEui}/queue": {
      "get": {
        "summary": "GetQueue returns the downlink device-queue.",
        "operationId": "DeviceService_GetQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetDeviceQueueItemsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "Device EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "countOnly",
            "description": "Return only the count, not the result-set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "delete": {
        "summary": "FlushQueue flushes the downlink device-queue.",
        "operationId": "DeviceService_FlushQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "devEui",
            "description": "Device EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{device.devEui}": {
      "put": {
        "summary": "Update the given device.",
        "operationId": "DeviceService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "device.devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "device": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Description."
                    },
                    "applicationId": {
                      "type": "string",
                      "description": "Application ID (UUID)."
                    },
                    "deviceProfileId": {
                      "type": "string",
                      "description": "Device-profile ID (UUID)."
                    },
                    "skipFcntCheck": {
                      "type": "boolean",
                      "description": "Skip frame-counter checks (this is insecure, but could be helpful for\ndebugging)."
                    },
                    "isDisabled": {
                      "type": "boolean",
                      "description": "Device is disabled."
                    },
                    "variables": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Variables (user defined).\nThese variables can be used together with integrations to store tokens /\nsecrets that must be configured per device. These variables are not\nexposed in the event payloads."
                    },
                    "tags": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Tags (user defined).\nThese tags can be used to add additional information to the device.\nThese tags are exposed in all the integration events."
                    },
                    "joinEui": {
                      "type": "string",
                      "description": "JoinEUI (optional, EUI64).\nThis field will be automatically set / updated on OTAA. However, in some\ncases it must be pre-configured. For example to allow OTAA using a Relay.\nIn this case the Relay needs to know the JoinEUI + DevEUI combinations\nof the devices for which it needs to forward uplinks."
                    }
                  },
                  "description": "Device object.",
                  "title": "Device object."
                }
              }
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{deviceActivation.devEui}/activate": {
      "post": {
        "summary": "Activate (re)activates the device with the given parameters (for ABP or for\nimporting OTAA activations).",
        "operationId": "DeviceService_Activate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deviceActivation.devEui",
            "description": "Device EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "deviceActivation": {
                  "type": "object",
                  "properties": {
                    "devAddr": {
                      "type": "string",
                      "description": "Device address (HEX encoded)."
                    },
                    "appSKey": {
                      "type": "string",
                      "description": "Application session key (HEX encoded)."
                    },
                    "nwkSEncKey": {
                      "type": "string",
                      "description": "Network session encryption key (HEX encoded).\nNote: For LoRaWAN 1.0.x devices, set this to the NwkSKey."
                    },
                    "sNwkSIntKey": {
                      "type": "string",
                      "description": "Serving network session integrity key (HEX encoded).\nNote: For LoRaWAN 1.0.x devices, set this to the NwkSKey."
                    },
                    "fNwkSIntKey": {
                      "type": "string",
                      "description": "Forwarding network session integrity key (HEX encoded).\nNote: For LoRaWAN 1.0.x devices, set this to the NwkSKey."
                    },
                    "fCntUp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Uplink frame-counter."
                    },
                    "nFCntDown": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Downlink network frame-counter."
                    },
                    "aFCntDown": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Downlink application frame-counter."
                    }
                  },
                  "description": "Device activation object.",
                  "title": "Device activation object."
                }
              }
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{deviceKeys.devEui}/keys": {
      "post": {
        "summary": "Create the given device-keys.",
        "operationId": "DeviceService_CreateKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deviceKeys.devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "deviceKeys": {
                  "type": "object",
                  "properties": {
                    "nwkKey": {
                      "type": "string",
                      "title": "Network root key (128 bit).\nNote: For LoRaWAN 1.0.x, use this field for the LoRaWAN 1.0.x 'AppKey`!"
                    },
                    "appKey": {
                      "type": "string",
                      "title": "Application root key (128 bit).\nNote: This field only needs to be set for LoRaWAN 1.1.x devices!"
                    },
                    "genAppKey": {
                      "type": "string",
                      "description": "Gen App Key (128 bit).\nNote: This field only needs to be set for LoRaWAN 1.0.x devices that\nimplement TS005 (remote multicast setup)."
                    }
                  },
                  "description": "Device-keys object.",
                  "title": "Device-keys object."
                }
              }
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      },
      "put": {
        "summary": "Update the given device-keys.",
        "operationId": "DeviceService_UpdateKeys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "deviceKeys.devEui",
            "description": "DevEUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "deviceKeys": {
                  "type": "object",
                  "properties": {
                    "nwkKey": {
                      "type": "string",
                      "title": "Network root key (128 bit).\nNote: For LoRaWAN 1.0.x, use this field for the LoRaWAN 1.0.x 'AppKey`!"
                    },
                    "appKey": {
                      "type": "string",
                      "title": "Application root key (128 bit).\nNote: This field only needs to be set for LoRaWAN 1.1.x devices!"
                    },
                    "genAppKey": {
                      "type": "string",
                      "description": "Gen App Key (128 bit).\nNote: This field only needs to be set for LoRaWAN 1.0.x devices that\nimplement TS005 (remote multicast setup)."
                    }
                  },
                  "description": "Device-keys object.",
                  "title": "Device-keys object."
                }
              }
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    },
    "/api/devices/{queueItem.devEui}/queue": {
      "post": {
        "summary": "Enqueue adds the given item to the downlink queue.",
        "operationId": "DeviceService_Enqueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiEnqueueDeviceQueueItemResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "queueItem.devEui",
            "description": "Device EUI (EUI64).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "queueItem": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID (UUID).\nThis is automatically generated on enqueue."
                    },
                    "confirmed": {
                      "type": "boolean",
                      "description": "Confirmed."
                    },
                    "fPort": {
                      "type": "integer",
                      "format": "int64",
                      "description": "FPort (must be \u003e 0)."
                    },
                    "data": {
                      "type": "string",
                      "format": "byte",
                      "description": "Data.\nOr use the json_object field when a codec has been configured."
                    },
                    "object": {
                      "type": "object",
                      "description": "Only use this when a codec has been configured that can encode this\nobject to bytes."
                    },
                    "isPending": {
                      "type": "boolean",
                      "description": "Is pending.\nThis is set by ChirpStack to true when the downlink is pending (e.g. it\nhas been sent, but a confirmation is still pending)."
                    },
                    "fCntDown": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Downlink frame-counter.\nDo not set this for plain-text data payloads. It will be automatically set\nby ChirpStack when the payload has been sent as downlink."
                    },
                    "isEncrypted": {
                      "type": "boolean",
                      "description": "Is encrypted.\nThis must be set to true if the end-application has already encrypted\nthe data payload. In this case, the f_cnt_down field must be set to\nthe corresponding frame-counter which has been used during the encryption."
                    },
                    "expiresAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Expires at (optional).\nExpired queue-items will be automatically removed from the queue."
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "DeviceService"
        ]
      }
    }
  },
  "definitions": {
    "ListDevicesRequestOrderBy": {
      "type": "string",
      "enum": [
        "NAME",
        "DEV_EUI",
        "LAST_SEEN_AT",
        "DEVICE_PROFILE_NAME"
      ],
      "default": "NAME"
    },
    "apiCreateDeviceRequest": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice",
          "description": "Device object."
        }
      }
    },
    "apiDevice": {
      "type": "object",
      "properties": {
        "devEui": {
          "type": "string",
          "description": "DevEUI (EUI64)."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "description": {
          "type": "string",
          "description": "Description."
        },
        "applicationId": {
          "type": "string",
          "description": "Application ID (UUID)."
        },
        "deviceProfileId": {
          "type": "string",
          "description": "Device-profile ID (UUID)."
        },
        "skipFcntCheck": {
          "type": "boolean",
          "description": "Skip frame-counter checks (this is insecure, but could be helpful for\ndebugging)."
        },
        "isDisabled": {
          "type": "boolean",
          "description": "Device is disabled."
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Variables (user defined).\nThese variables can be used together with integrations to store tokens /\nsecrets that must be configured per device. These variables are not\nexposed in the event payloads."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags (user defined).\nThese tags can be used to add additional information to the device.\nThese tags are exposed in all the integration events."
        },
        "joinEui": {
          "type": "string",
          "description": "JoinEUI (optional, EUI64).\nThis field will be automatically set / updated on OTAA. However, in some\ncases it must be pre-configured. For example to allow OTAA using a Relay.\nIn this case the Relay needs to know the JoinEUI + DevEUI combinations\nof the devices for which it needs to forward uplinks."
        }
      }
    },
    "apiDeviceActivation": {
      "type": "object",
      "properties": {
        "devEui": {
          "type": "string",
          "description": "Device EUI (EUI64)."
        },
        "devAddr": {
          "type": "string",
          "description": "Device address (HEX encoded)."
        },
        "appSKey": {
          "type": "string",
          "description": "Application session key (HEX encoded)."
        },
        "nwkSEncKey": {
          "type": "string",
          "description": "Network session encryption key (HEX encoded).\nNote: For LoRaWAN 1.0.x devices, set this to the NwkSKey."
        },
        "sNwkSIntKey": {
          "type": "string",
          "description": "Serving network session integrity key (HEX encoded).\nNote: For LoRaWAN 1.0.x devices, set this to the NwkSKey."
        },
        "fNwkSIntKey": {
          "type": "string",
          "description": "Forwarding network session integrity key (HEX encoded).\nNote: For LoRaWAN 1.0.x devices, set this to the NwkSKey."
        },
        "fCntUp": {
          "type": "integer",
          "format": "int64",
          "description": "Uplink frame-counter."
        },
        "nFCntDown": {
          "type": "integer",
          "format": "int64",
          "description": "Downlink network frame-counter."
        },
        "aFCntDown": {
          "type": "integer",
          "format": "int64",
          "description": "Downlink application frame-counter."
        }
      }
    },
    "apiDeviceKeys": {
      "type": "object",
      "properties": {
        "devEui": {
          "type": "string",
          "description": "DevEUI (EUI64)."
        },
        "nwkKey": {
          "type": "string",
          "title": "Network root key (128 bit).\nNote: For LoRaWAN 1.0.x, use this field for the LoRaWAN 1.0.x 'AppKey`!"
        },
        "appKey": {
          "type": "string",
          "title": "Application root key (128 bit).\nNote: This field only needs to be set for LoRaWAN 1.1.x devices!"
        },
        "genAppKey": {
          "type": "string",
          "description": "Gen App Key (128 bit).\nNote: This field only needs to be set for LoRaWAN 1.0.x devices that\nimplement TS005 (remote multicast setup)."
        }
      }
    },
    "apiDeviceListItem": {
      "type": "object",
      "properties": {
        "devEui": {
          "type": "string",
          "description": "DevEUI (EUI64)."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Created at timestamp."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last update timestamp."
        },
        "lastSeenAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last seen at timestamp."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "description": {
          "type": "string",
          "description": "Description."
        },
        "deviceProfileId": {
          "type": "string",
          "description": "Device-profile ID (UUID)."
        },
        "deviceProfileName": {
          "type": "string",
          "description": "Device-profile name."
        },
        "deviceStatus": {
          "$ref": "#/definitions/apiDeviceStatus",
          "description": "Device status."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Device tags."
        }
      }
    },
    "apiDeviceQueueItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID (UUID).\nThis is automatically generated on enqueue."
        },
        "devEui": {
          "type": "string",
          "description": "Device EUI (EUI64)."
        },
        "confirmed": {
          "type": "boolean",
          "description": "Confirmed."
        },
        "fPort": {
          "type": "integer",
          "format": "int64",
          "description": "FPort (must be \u003e 0)."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "Data.\nOr use the json_object field when a codec has been configured."
        },
        "object": {
          "type": "object",
          "description": "Only use this when a codec has been configured that can encode this\nobject to bytes."
        },
        "isPending": {
          "type": "boolean",
          "description": "Is pending.\nThis is set by ChirpStack to true when the downlink is pending (e.g. it\nhas been sent, but a confirmation is still pending)."
        },
        "fCntDown": {
          "type": "integer",
          "format": "int64",
          "description": "Downlink frame-counter.\nDo not set this for plain-text data payloads. It will be automatically set\nby ChirpStack when the payload has been sent as downlink."
        },
        "isEncrypted": {
          "type": "boolean",
          "description": "Is encrypted.\nThis must be set to true if the end-application has already encrypted\nthe data payload. In this case, the f_cnt_down field must be set to\nthe corresponding frame-counter which has been used during the encryption."
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "description": "Expires at (optional).\nExpired queue-items will be automatically removed from the queue."
        }
      }
    },
    "apiDeviceState": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name."
        },
        "value": {
          "type": "string",
          "description": "Value."
        }
      }
    },
    "apiDeviceStatus": {
      "type": "object",
      "properties": {
        "margin": {
          "type": "integer",
          "format": "int32",
          "title": "The device margin status\n-32..32: The demodulation SNR ration in dB"
        },
        "externalPowerSource": {
          "type": "boolean",
          "description": "Device is connected to an external power source."
        },
        "batteryLevel": {
          "type": "number",
          "format": "float",
          "description": "Device battery level as a percentage.\n-1 when the battery level is not available."
        }
      }
    },
    "apiEnqueueDeviceQueueItemResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID (UUID)."
        }
      }
    },
    "apiGetDeviceActivationResponse": {
      "type": "object",
      "properties": {
        "deviceActivation": {
          "$ref": "#/definitions/apiDeviceActivation",
          "description": "Device activation object."
        },
        "joinServerContext": {
          "$ref": "#/definitions/commonJoinServerContext",
          "description": "Join-Server context.\nA non-empty value indicatest that ChirpStack does not have access to\nthe AppSKey and that the encryption / decryption of the payloads is\nthe responsibility of the end-application."
        }
      }
    },
    "apiGetDeviceKeysResponse": {
      "type": "object",
      "properties": {
        "deviceKeys": {
          "$ref": "#/definitions/apiDeviceKeys",
          "description": "Device-keys object."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Created at timestamp."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last update timestamp."
        }
      }
    },
    "apiGetDeviceLinkMetricsResponse": {
      "type": "object",
      "properties": {
        "rxPackets": {
          "$ref": "#/definitions/commonMetric",
          "description": "Packets received from the device."
        },
        "gwRssi": {
          "$ref": "#/definitions/commonMetric",
          "description": "RSSI (as reported by the gateway(s))."
        },
        "gwSnr": {
          "$ref": "#/definitions/commonMetric",
          "description": "SNR (as reported by the gateway(s))."
        },
        "rxPacketsPerFreq": {
          "$ref": "#/definitions/commonMetric",
          "description": "Packets received by frequency."
        },
        "rxPacketsPerDr": {
          "$ref": "#/definitions/commonMetric",
          "description": "Packets received by DR."
        },
        "errors": {
          "$ref": "#/definitions/commonMetric",
          "description": "Errors."
        }
      }
    },
    "apiGetDeviceMetricsResponse": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/commonMetric"
          }
        },
        "states": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/apiDeviceState"
          }
        }
      }
    },
    "apiGetDeviceNextFCntDownResponse": {
      "type": "object",
      "properties": {
        "fCntDown": {
          "type": "integer",
          "format": "int64",
          "description": "FCntDown."
        }
      }
    },
    "apiGetDeviceQueueItemsResponse": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of queue items."
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDeviceQueueItem"
          },
          "description": "Result-set."
        }
      }
    },
    "apiGetDeviceResponse": {
      "type": "object",
      "properties": {
        "device": {
          "$ref": "#/definitions/apiDevice",
          "description": "Device object."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Created at timestamp."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last update timestamp."
        },
        "lastSeenAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last seen at timestamp."
        },
        "deviceStatus": {
          "$ref": "#/definitions/apiDeviceStatus",
          "description": "Device status."
        },
        "classEnabled": {
          "$ref": "#/definitions/commonDeviceClass",
          "description": "Enabled device class."
        }
      }
    },
    "apiGetRandomDevAddrResponse": {
      "type": "object",
      "properties": {
        "devAddr": {
          "type": "string",
          "description": "DevAddr."
        }
      }
    },
    "apiListDevicesResponse": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "description": "Total number of devices."
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiDeviceListItem"
          },
          "description": "Result-set."
        }
      }
    },
    "commonAggregation": {
      "type": "string",
      "enum": [
        "HOUR",
        "DAY",
        "MONTH",
        "MINUTE"
      ],
      "default": "HOUR",
      "description": " - HOUR: Hour.\n - DAY: Day.\n - MONTH: Month.\n - MINUTE: Minute."
    },
    "commonDeviceClass": {
      "type": "string",
      "enum": [
        "CLASS_A",
        "CLASS_B",
        "CLASS_C"
      ],
      "default": "CLASS_A",
      "description": " - CLASS_A: Class-A.\n - CLASS_B: Class-B.\n - CLASS_C: Class-C."
    },
    "commonJoinServerContext": {
      "type": "object",
      "properties": {
        "sessionKeyId": {
          "type": "string",
          "description": "Session-key ID."
        },
        "appSKey": {
          "$ref": "#/definitions/commonKeyEnvelope",
          "description": "AppSKey envelope."
        }
      },
      "description": "Join-Server context."
    },
    "commonKeyEnvelope": {
      "type": "object",
      "properties": {
        "kekLabel": {
          "type": "string",
          "description": "KEK label."
        },
        "aesKey": {
          "type": "string",
          "format": "byte",
          "description": "AES key (when the kek_label is set, this value must first be decrypted)."
        }
      }
    },
    "commonMetric": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name."
        },
        "timestamps": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          },
          "description": "Timestamps."
        },
        "datasets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/commonMetricDataset"
          },
          "description": "Datasets."
        },
        "kind": {
          "$ref": "#/definitions/commonMetricKind",
          "description": "Kind."
        }
      }
    },
    "commonMetricDataset": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "description": "Label."
        },
        "data": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          },
          "description": "Data.\nEach value index corresponds with the same timestamp index of the Metric."
        }
      }
    },
    "commonMetricKind": {
      "type": "string",
      "enum": [
        "COUNTER",
        "ABSOLUTE",
        "GAUGE"
      ],
      "default": "COUNTER",
      "description": " - COUNTER: Incrementing counters that never decrease (these are not reset on each\nreading).\n - ABSOLUTE: Counters that do get reset upon reading.\n - GAUGE: E.g. a temperature value."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
